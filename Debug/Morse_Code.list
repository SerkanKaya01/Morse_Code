
Morse_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e10  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fbc  08002fbc  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fc4  08002fc4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000060  0800302c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800302c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9fe  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001900  00000000  00000000  0002ca8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002eef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c56  00000000  00000000  0002f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce09  00000000  00000000  0004561e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1dc  00000000  00000000  00052427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000302c  00000000  00000000  000de654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000060 	.word	0x20000060
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f8c 	.word	0x08002f8c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000064 	.word	0x20000064
 80001d0:	08002f8c 	.word	0x08002f8c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fe46 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f812 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8f0 	bl	80006c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8c4 	bl	8000674 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004ec:	f000 f876 	bl	80005dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <main+0x2c>)
 80004f2:	f001 fe5d 	bl	80021b0 <HAL_TIM_Base_Start_IT>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <main+0x28>
  {
	  Error_Handler();
 80004fc:	f000 f95e 	bl	80007bc <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x28>
 8000502:	bf00      	nop
 8000504:	2000007c 	.word	0x2000007c

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fd30 	bl	8002f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <SystemClock_Config+0xd0>)
 8000556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	2310      	movs	r3, #16
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000578:	2300      	movs	r3, #0
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000580:	2354      	movs	r3, #84	; 0x54
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000588:	2307      	movs	r3, #7
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f925 	bl	80017e0 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800059c:	f000 f90e 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2101      	movs	r1, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fb88 	bl	8001cd0 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f8f9 	bl	80007bc <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_TIM2_Init+0x94>)
 80005fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4199;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_TIM2_Init+0x94>)
 8000602:	f241 0267 	movw	r2, #4199	; 0x1067
 8000606:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_TIM2_Init+0x94>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_TIM2_Init+0x94>)
 8000610:	2209      	movs	r2, #9
 8000612:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_TIM2_Init+0x94>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_TIM2_Init+0x94>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <MX_TIM2_Init+0x94>)
 8000622:	f001 fd75 	bl	8002110 <HAL_TIM_Base_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800062c:	f000 f8c6 	bl	80007bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4619      	mov	r1, r3
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_TIM2_Init+0x94>)
 800063e:	f001 ff21 	bl	8002484 <HAL_TIM_ConfigClockSource>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 f8b8 	bl	80007bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_TIM2_Init+0x94>)
 800065a:	f002 f927 	bl	80028ac <HAL_TIMEx_MasterConfigSynchronization>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000664:	f000 f8aa 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000007c 	.word	0x2000007c

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006ac:	f002 f980 	bl	80029b0 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006b6:	f000 f881 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000c4 	.word	0x200000c4
 80006c4:	40004400 	.word	0x40004400

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <MX_GPIO_Init+0xe8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a32      	ldr	r2, [pc, #200]	; (80007b0 <MX_GPIO_Init+0xe8>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <MX_GPIO_Init+0xe8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <MX_GPIO_Init+0xe8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a2b      	ldr	r2, [pc, #172]	; (80007b0 <MX_GPIO_Init+0xe8>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <MX_GPIO_Init+0xe8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <MX_GPIO_Init+0xe8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a24      	ldr	r2, [pc, #144]	; (80007b0 <MX_GPIO_Init+0xe8>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_GPIO_Init+0xe8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_GPIO_Init+0xe8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <MX_GPIO_Init+0xe8>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_GPIO_Init+0xe8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	4818      	ldr	r0, [pc, #96]	; (80007b4 <MX_GPIO_Init+0xec>)
 8000754:	f001 f82a 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	4812      	ldr	r0, [pc, #72]	; (80007b8 <MX_GPIO_Init+0xf0>)
 8000770:	f000 fe80 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000774:	2301      	movs	r3, #1
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_GPIO_Init+0xf0>)
 8000788:	f000 fe74 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078c:	2320      	movs	r3, #32
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0xec>)
 80007a4:	f000 fe66 	bl	8001474 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020800 	.word	0x40020800

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000806:	2007      	movs	r0, #7
 8000808:	f000 fdf2 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000828:	d115      	bne.n	8000856 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_TIM_Base_MspInit+0x48>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <HAL_TIM_Base_MspInit+0x48>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_TIM_Base_MspInit+0x48>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	201c      	movs	r0, #28
 800084c:	f000 fddb 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000850:	201c      	movs	r0, #28
 8000852:	f000 fdf4 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <HAL_UART_MspInit+0x84>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d12b      	bne.n	80008de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_UART_MspInit+0x88>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_UART_MspInit+0x88>)
 8000890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_UART_MspInit+0x88>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_UART_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_UART_MspInit+0x88>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_UART_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008be:	230c      	movs	r3, #12
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ce:	2307      	movs	r3, #7
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_UART_MspInit+0x8c>)
 80008da:	f000 fdcb 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40004400 	.word	0x40004400
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <NMI_Handler+0x4>

080008fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <MemManage_Handler+0x4>

08000906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <UsageFault_Handler+0x4>

08000912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000940:	f000 fc66 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800094e:	4887      	ldr	r0, [pc, #540]	; (8000b6c <TIM2_IRQHandler+0x224>)
 8000950:	f001 fc90 	bl	8002274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (Button_Pressed)
 8000954:	2101      	movs	r1, #1
 8000956:	4886      	ldr	r0, [pc, #536]	; (8000b70 <TIM2_IRQHandler+0x228>)
 8000958:	f000 ff10 	bl	800177c <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d113      	bne.n	800098a <TIM2_IRQHandler+0x42>
  {
	  BUTTON.Pressed_Duration_Now++;
 8000962:	4b84      	ldr	r3, [pc, #528]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a82      	ldr	r2, [pc, #520]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 800096a:	6013      	str	r3, [r2, #0]
	  Button_Released_Counter_Starter_Flag = 1;
 800096c:	4b82      	ldr	r3, [pc, #520]	; (8000b78 <TIM2_IRQHandler+0x230>)
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
	  if(BUTTON.Released_Duration_Now != 0)
 8000972:	4b80      	ldr	r3, [pc, #512]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d01b      	beq.n	80009b2 <TIM2_IRQHandler+0x6a>
	  {
		  BUTTON.Released_Duration_old = BUTTON.Released_Duration_Now;
 800097a:	4b7e      	ldr	r3, [pc, #504]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	4a7d      	ldr	r2, [pc, #500]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000980:	6113      	str	r3, [r2, #16]
		  BUTTON.Released_Duration_Now = 0;
 8000982:	4b7c      	ldr	r3, [pc, #496]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	e013      	b.n	80009b2 <TIM2_IRQHandler+0x6a>
	  }

  }
  else
  {
	  if ( Button_Released_Counter_Starter_Flag == 1)
 800098a:	4b7b      	ldr	r3, [pc, #492]	; (8000b78 <TIM2_IRQHandler+0x230>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d10f      	bne.n	80009b2 <TIM2_IRQHandler+0x6a>
	  {
		  BUTTON.Released_Duration_Now++;
 8000992:	4b78      	ldr	r3, [pc, #480]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	4a76      	ldr	r2, [pc, #472]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 800099a:	60d3      	str	r3, [r2, #12]
		  if (BUTTON.Pressed_Duration_Now != 0)
 800099c:	4b75      	ldr	r3, [pc, #468]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <TIM2_IRQHandler+0x6a>
		  {
			  BUTTON.Pressed_Duration_old = BUTTON.Pressed_Duration_Now;
 80009a4:	4b73      	ldr	r3, [pc, #460]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a72      	ldr	r2, [pc, #456]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009aa:	6053      	str	r3, [r2, #4]
			  BUTTON.Pressed_Duration_Now = 0;
 80009ac:	4b71      	ldr	r3, [pc, #452]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
		  }

	  }
  }

  if (BUTTON.Pressed_Duration_old != BUTTON.Pressed_Duration_old_old)
 80009b2:	4b70      	ldr	r3, [pc, #448]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	4b6f      	ldr	r3, [pc, #444]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d006      	beq.n	80009cc <TIM2_IRQHandler+0x84>
  {
	  Morce_Bit_Reading_Flag = 1;
 80009be:	4b6f      	ldr	r3, [pc, #444]	; (8000b7c <TIM2_IRQHandler+0x234>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
	  BUTTON.Pressed_Duration_old_old = BUTTON.Pressed_Duration_old;
 80009c4:	4b6b      	ldr	r3, [pc, #428]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	4a6a      	ldr	r2, [pc, #424]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009ca:	6093      	str	r3, [r2, #8]
  }

  if (Morce_Bit_Reading_Flag == 1)
 80009cc:	4b6b      	ldr	r3, [pc, #428]	; (8000b7c <TIM2_IRQHandler+0x234>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d129      	bne.n	8000a28 <TIM2_IRQHandler+0xe0>
  {
	  if(BUTTON.Pressed_Duration_old > Filter_value && BUTTON.Pressed_Duration_old < 300)
 80009d4:	4b67      	ldr	r3, [pc, #412]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b32      	cmp	r3, #50	; 0x32
 80009da:	d90b      	bls.n	80009f4 <TIM2_IRQHandler+0xac>
 80009dc:	4b65      	ldr	r3, [pc, #404]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009e4:	d206      	bcs.n	80009f4 <TIM2_IRQHandler+0xac>
	  {
		  BUTTON.Morse_Bit = 0;
 80009e6:	4b63      	ldr	r3, [pc, #396]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
		  Morce_Bit_Reading_Flag = 0;
 80009ec:	4b63      	ldr	r3, [pc, #396]	; (8000b7c <TIM2_IRQHandler+0x234>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e00a      	b.n	8000a0a <TIM2_IRQHandler+0xc2>

	  }
	  else if(BUTTON.Pressed_Duration_old > 300 )
 80009f4:	4b5f      	ldr	r3, [pc, #380]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009fc:	d905      	bls.n	8000a0a <TIM2_IRQHandler+0xc2>
	  {
		  BUTTON.Morse_Bit = 1;
 80009fe:	4b5d      	ldr	r3, [pc, #372]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	615a      	str	r2, [r3, #20]
		  Morce_Bit_Reading_Flag = 0;
 8000a04:	4b5d      	ldr	r3, [pc, #372]	; (8000b7c <TIM2_IRQHandler+0x234>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]

	  }
	  BUTTON.Morse_bit[Index_Of_Morse_Character] = BUTTON.Morse_Bit;
 8000a0a:	4b5a      	ldr	r3, [pc, #360]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	4b5c      	ldr	r3, [pc, #368]	; (8000b80 <TIM2_IRQHandler+0x238>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4a57      	ldr	r2, [pc, #348]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a16:	3306      	adds	r3, #6
 8000a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  Index_Of_Morse_Character++;
 8000a1c:	4b58      	ldr	r3, [pc, #352]	; (8000b80 <TIM2_IRQHandler+0x238>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b56      	ldr	r3, [pc, #344]	; (8000b80 <TIM2_IRQHandler+0x238>)
 8000a26:	701a      	strb	r2, [r3, #0]


  }
  if (BUTTON.Released_Duration_Now == 3000)
 8000a28:	4b52      	ldr	r3, [pc, #328]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a30:	4293      	cmp	r3, r2
 8000a32:	f040 8336 	bne.w	80010a2 <TIM2_IRQHandler+0x75a>
  {
	  Index_Of_Morse_Character = 0;
 8000a36:	4b52      	ldr	r3, [pc, #328]	; (8000b80 <TIM2_IRQHandler+0x238>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
	  for (int m = 0; m < 5; m++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e00d      	b.n	8000a5e <TIM2_IRQHandler+0x116>
	  {
		  BUTTON.Morse_bit_old[m] = BUTTON.Morse_bit[m];
 8000a42:	4a4c      	ldr	r2, [pc, #304]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3306      	adds	r3, #6
 8000a48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a4c:	4949      	ldr	r1, [pc, #292]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	330a      	adds	r3, #10
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	440b      	add	r3, r1
 8000a56:	605a      	str	r2, [r3, #4]
	  for (int m = 0; m < 5; m++)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	ddee      	ble.n	8000a42 <TIM2_IRQHandler+0xfa>
	  }
	  for (int m = 0;  m<5; m++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	e008      	b.n	8000a7c <TIM2_IRQHandler+0x134>
	  {
		  BUTTON.Morse_bit[m] = 2;
 8000a6a:	4a42      	ldr	r2, [pc, #264]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	3306      	adds	r3, #6
 8000a70:	2102      	movs	r1, #2
 8000a72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (int m = 0;  m<5; m++)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	ddf3      	ble.n	8000a6a <TIM2_IRQHandler+0x122>
	  }

	  if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 2 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d118      	bne.n	8000abc <TIM2_IRQHandler+0x174>
 8000a8a:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d114      	bne.n	8000abc <TIM2_IRQHandler+0x174>
 8000a92:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d110      	bne.n	8000abc <TIM2_IRQHandler+0x174>
 8000a9a:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d10c      	bne.n	8000abc <TIM2_IRQHandler+0x174>
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d108      	bne.n	8000abc <TIM2_IRQHandler+0x174>
	  {
		  BUTTON.Letter[n] = 'A';
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <TIM2_IRQHandler+0x23c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000ab2:	4413      	add	r3, r2
 8000ab4:	2241      	movs	r2, #65	; 0x41
 8000ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000aba:	e2ec      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 0 &&  BUTTON.Morse_bit_old[4] == 2)
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d118      	bne.n	8000af6 <TIM2_IRQHandler+0x1ae>
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d114      	bne.n	8000af6 <TIM2_IRQHandler+0x1ae>
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d110      	bne.n	8000af6 <TIM2_IRQHandler+0x1ae>
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d10c      	bne.n	8000af6 <TIM2_IRQHandler+0x1ae>
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d108      	bne.n	8000af6 <TIM2_IRQHandler+0x1ae>
	  {
		  BUTTON.Letter[n] = 'B';
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <TIM2_IRQHandler+0x23c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000aec:	4413      	add	r3, r2
 8000aee:	2242      	movs	r2, #66	; 0x42
 8000af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000af4:	e2cf      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 1 && BUTTON.Morse_bit_old[3] == 0 &&  BUTTON.Morse_bit_old[4] == 2)
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d118      	bne.n	8000b30 <TIM2_IRQHandler+0x1e8>
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d114      	bne.n	8000b30 <TIM2_IRQHandler+0x1e8>
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d110      	bne.n	8000b30 <TIM2_IRQHandler+0x1e8>
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10c      	bne.n	8000b30 <TIM2_IRQHandler+0x1e8>
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d108      	bne.n	8000b30 <TIM2_IRQHandler+0x1e8>
	  {
		  BUTTON.Letter[n] = 'C';
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <TIM2_IRQHandler+0x23c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b26:	4413      	add	r3, r2
 8000b28:	2243      	movs	r2, #67	; 0x43
 8000b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000b2e:	e2b2      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d127      	bne.n	8000b88 <TIM2_IRQHandler+0x240>
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d123      	bne.n	8000b88 <TIM2_IRQHandler+0x240>
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d11f      	bne.n	8000b88 <TIM2_IRQHandler+0x240>
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d11b      	bne.n	8000b88 <TIM2_IRQHandler+0x240>
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d117      	bne.n	8000b88 <TIM2_IRQHandler+0x240>
	  {
		  BUTTON.Letter[n] = 'D';
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <TIM2_IRQHandler+0x23c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <TIM2_IRQHandler+0x22c>)
 8000b60:	4413      	add	r3, r2
 8000b62:	2244      	movs	r2, #68	; 0x44
 8000b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000b68:	e295      	b.n	8001096 <TIM2_IRQHandler+0x74e>
 8000b6a:	bf00      	nop
 8000b6c:	2000007c 	.word	0x2000007c
 8000b70:	40020800 	.word	0x40020800
 8000b74:	20000000 	.word	0x20000000
 8000b78:	2000010a 	.word	0x2000010a
 8000b7c:	20000108 	.word	0x20000108
 8000b80:	20000109 	.word	0x20000109
 8000b84:	2000010b 	.word	0x2000010b
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 2 && BUTTON.Morse_bit_old[2] == 2 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000b88:	4b82      	ldr	r3, [pc, #520]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d118      	bne.n	8000bc2 <TIM2_IRQHandler+0x27a>
 8000b90:	4b80      	ldr	r3, [pc, #512]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d114      	bne.n	8000bc2 <TIM2_IRQHandler+0x27a>
 8000b98:	4b7e      	ldr	r3, [pc, #504]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d110      	bne.n	8000bc2 <TIM2_IRQHandler+0x27a>
 8000ba0:	4b7c      	ldr	r3, [pc, #496]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d10c      	bne.n	8000bc2 <TIM2_IRQHandler+0x27a>
 8000ba8:	4b7a      	ldr	r3, [pc, #488]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d108      	bne.n	8000bc2 <TIM2_IRQHandler+0x27a>
	  {
		  BUTTON.Letter[n] = 'E';
 8000bb0:	4b79      	ldr	r3, [pc, #484]	; (8000d98 <TIM2_IRQHandler+0x450>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b77      	ldr	r3, [pc, #476]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000bb8:	4413      	add	r3, r2
 8000bba:	2245      	movs	r2, #69	; 0x45
 8000bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000bc0:	e269      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 1 && BUTTON.Morse_bit_old[3] == 0 &&  BUTTON.Morse_bit_old[4] == 2)
 8000bc2:	4b74      	ldr	r3, [pc, #464]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d118      	bne.n	8000bfc <TIM2_IRQHandler+0x2b4>
 8000bca:	4b72      	ldr	r3, [pc, #456]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d114      	bne.n	8000bfc <TIM2_IRQHandler+0x2b4>
 8000bd2:	4b70      	ldr	r3, [pc, #448]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d110      	bne.n	8000bfc <TIM2_IRQHandler+0x2b4>
 8000bda:	4b6e      	ldr	r3, [pc, #440]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10c      	bne.n	8000bfc <TIM2_IRQHandler+0x2b4>
 8000be2:	4b6c      	ldr	r3, [pc, #432]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d108      	bne.n	8000bfc <TIM2_IRQHandler+0x2b4>
	  {
		  BUTTON.Letter[n] = 'F';
 8000bea:	4b6b      	ldr	r3, [pc, #428]	; (8000d98 <TIM2_IRQHandler+0x450>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b68      	ldr	r3, [pc, #416]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2246      	movs	r2, #70	; 0x46
 8000bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000bfa:	e24c      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000bfc:	4b65      	ldr	r3, [pc, #404]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d118      	bne.n	8000c36 <TIM2_IRQHandler+0x2ee>
 8000c04:	4b63      	ldr	r3, [pc, #396]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d114      	bne.n	8000c36 <TIM2_IRQHandler+0x2ee>
 8000c0c:	4b61      	ldr	r3, [pc, #388]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d110      	bne.n	8000c36 <TIM2_IRQHandler+0x2ee>
 8000c14:	4b5f      	ldr	r3, [pc, #380]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d10c      	bne.n	8000c36 <TIM2_IRQHandler+0x2ee>
 8000c1c:	4b5d      	ldr	r3, [pc, #372]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d108      	bne.n	8000c36 <TIM2_IRQHandler+0x2ee>
	  {
		  BUTTON.Letter[n] = 'G';
 8000c24:	4b5c      	ldr	r3, [pc, #368]	; (8000d98 <TIM2_IRQHandler+0x450>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b5a      	ldr	r3, [pc, #360]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c2c:	4413      	add	r3, r2
 8000c2e:	2247      	movs	r2, #71	; 0x47
 8000c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000c34:	e22f      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 0 &&  BUTTON.Morse_bit_old[4] == 2)
 8000c36:	4b57      	ldr	r3, [pc, #348]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d118      	bne.n	8000c70 <TIM2_IRQHandler+0x328>
 8000c3e:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d114      	bne.n	8000c70 <TIM2_IRQHandler+0x328>
 8000c46:	4b53      	ldr	r3, [pc, #332]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d110      	bne.n	8000c70 <TIM2_IRQHandler+0x328>
 8000c4e:	4b51      	ldr	r3, [pc, #324]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10c      	bne.n	8000c70 <TIM2_IRQHandler+0x328>
 8000c56:	4b4f      	ldr	r3, [pc, #316]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d108      	bne.n	8000c70 <TIM2_IRQHandler+0x328>
	  {
		  BUTTON.Letter[n] = 'H';
 8000c5e:	4b4e      	ldr	r3, [pc, #312]	; (8000d98 <TIM2_IRQHandler+0x450>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c66:	4413      	add	r3, r2
 8000c68:	2248      	movs	r2, #72	; 0x48
 8000c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000c6e:	e212      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 2 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000c70:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d118      	bne.n	8000caa <TIM2_IRQHandler+0x362>
 8000c78:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d114      	bne.n	8000caa <TIM2_IRQHandler+0x362>
 8000c80:	4b44      	ldr	r3, [pc, #272]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d110      	bne.n	8000caa <TIM2_IRQHandler+0x362>
 8000c88:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d10c      	bne.n	8000caa <TIM2_IRQHandler+0x362>
 8000c90:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d108      	bne.n	8000caa <TIM2_IRQHandler+0x362>
	  {
		  BUTTON.Letter[n] = 'I';
 8000c98:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <TIM2_IRQHandler+0x450>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	2249      	movs	r2, #73	; 0x49
 8000ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ca8:	e1f5      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 1 && BUTTON.Morse_bit_old[3] == 1 &&  BUTTON.Morse_bit_old[4] == 2)
 8000caa:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d118      	bne.n	8000ce4 <TIM2_IRQHandler+0x39c>
 8000cb2:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d114      	bne.n	8000ce4 <TIM2_IRQHandler+0x39c>
 8000cba:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d110      	bne.n	8000ce4 <TIM2_IRQHandler+0x39c>
 8000cc2:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d10c      	bne.n	8000ce4 <TIM2_IRQHandler+0x39c>
 8000cca:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d108      	bne.n	8000ce4 <TIM2_IRQHandler+0x39c>
	  {
		  BUTTON.Letter[n] = 'J';
 8000cd2:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <TIM2_IRQHandler+0x450>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	224a      	movs	r2, #74	; 0x4a
 8000cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ce2:	e1d8      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 1 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d118      	bne.n	8000d1e <TIM2_IRQHandler+0x3d6>
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d114      	bne.n	8000d1e <TIM2_IRQHandler+0x3d6>
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d110      	bne.n	8000d1e <TIM2_IRQHandler+0x3d6>
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d10c      	bne.n	8000d1e <TIM2_IRQHandler+0x3d6>
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d108      	bne.n	8000d1e <TIM2_IRQHandler+0x3d6>
	  {
		  BUTTON.Letter[n] = 'K';
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <TIM2_IRQHandler+0x450>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d14:	4413      	add	r3, r2
 8000d16:	224b      	movs	r2, #75	; 0x4b
 8000d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000d1c:	e1bb      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 0 &&  BUTTON.Morse_bit_old[4] == 2)
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d118      	bne.n	8000d58 <TIM2_IRQHandler+0x410>
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d114      	bne.n	8000d58 <TIM2_IRQHandler+0x410>
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d110      	bne.n	8000d58 <TIM2_IRQHandler+0x410>
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10c      	bne.n	8000d58 <TIM2_IRQHandler+0x410>
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d108      	bne.n	8000d58 <TIM2_IRQHandler+0x410>
	  {
		  BUTTON.Letter[n] = 'L';
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <TIM2_IRQHandler+0x450>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	224c      	movs	r2, #76	; 0x4c
 8000d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000d56:	e19e      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 2 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d11d      	bne.n	8000d9c <TIM2_IRQHandler+0x454>
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d119      	bne.n	8000d9c <TIM2_IRQHandler+0x454>
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d115      	bne.n	8000d9c <TIM2_IRQHandler+0x454>
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d111      	bne.n	8000d9c <TIM2_IRQHandler+0x454>
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d10d      	bne.n	8000d9c <TIM2_IRQHandler+0x454>
	  {
		  BUTTON.Letter[n] = 'M';
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <TIM2_IRQHandler+0x450>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <TIM2_IRQHandler+0x44c>)
 8000d88:	4413      	add	r3, r2
 8000d8a:	224d      	movs	r2, #77	; 0x4d
 8000d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000d90:	e181      	b.n	8001096 <TIM2_IRQHandler+0x74e>
 8000d92:	bf00      	nop
 8000d94:	20000000 	.word	0x20000000
 8000d98:	2000010b 	.word	0x2000010b
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 2 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000d9c:	4b82      	ldr	r3, [pc, #520]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d118      	bne.n	8000dd6 <TIM2_IRQHandler+0x48e>
 8000da4:	4b80      	ldr	r3, [pc, #512]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d114      	bne.n	8000dd6 <TIM2_IRQHandler+0x48e>
 8000dac:	4b7e      	ldr	r3, [pc, #504]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d110      	bne.n	8000dd6 <TIM2_IRQHandler+0x48e>
 8000db4:	4b7c      	ldr	r3, [pc, #496]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d10c      	bne.n	8000dd6 <TIM2_IRQHandler+0x48e>
 8000dbc:	4b7a      	ldr	r3, [pc, #488]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d108      	bne.n	8000dd6 <TIM2_IRQHandler+0x48e>
	  {
		  BUTTON.Letter[n] = 'N';
 8000dc4:	4b79      	ldr	r3, [pc, #484]	; (8000fac <TIM2_IRQHandler+0x664>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b77      	ldr	r3, [pc, #476]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	224e      	movs	r2, #78	; 0x4e
 8000dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000dd4:	e15f      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 1 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000dd6:	4b74      	ldr	r3, [pc, #464]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d118      	bne.n	8000e10 <TIM2_IRQHandler+0x4c8>
 8000dde:	4b72      	ldr	r3, [pc, #456]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d114      	bne.n	8000e10 <TIM2_IRQHandler+0x4c8>
 8000de6:	4b70      	ldr	r3, [pc, #448]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d110      	bne.n	8000e10 <TIM2_IRQHandler+0x4c8>
 8000dee:	4b6e      	ldr	r3, [pc, #440]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d10c      	bne.n	8000e10 <TIM2_IRQHandler+0x4c8>
 8000df6:	4b6c      	ldr	r3, [pc, #432]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d108      	bne.n	8000e10 <TIM2_IRQHandler+0x4c8>
	  {
		  BUTTON.Letter[n] = 'O';
 8000dfe:	4b6b      	ldr	r3, [pc, #428]	; (8000fac <TIM2_IRQHandler+0x664>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b68      	ldr	r3, [pc, #416]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e06:	4413      	add	r3, r2
 8000e08:	224f      	movs	r2, #79	; 0x4f
 8000e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000e0e:	e142      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 1 && BUTTON.Morse_bit_old[3] == 0 &&  BUTTON.Morse_bit_old[4] == 2)
 8000e10:	4b65      	ldr	r3, [pc, #404]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d118      	bne.n	8000e4a <TIM2_IRQHandler+0x502>
 8000e18:	4b63      	ldr	r3, [pc, #396]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d114      	bne.n	8000e4a <TIM2_IRQHandler+0x502>
 8000e20:	4b61      	ldr	r3, [pc, #388]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d110      	bne.n	8000e4a <TIM2_IRQHandler+0x502>
 8000e28:	4b5f      	ldr	r3, [pc, #380]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10c      	bne.n	8000e4a <TIM2_IRQHandler+0x502>
 8000e30:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d108      	bne.n	8000e4a <TIM2_IRQHandler+0x502>
	  {
		  BUTTON.Letter[n] = 'P';
 8000e38:	4b5c      	ldr	r3, [pc, #368]	; (8000fac <TIM2_IRQHandler+0x664>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b5a      	ldr	r3, [pc, #360]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e40:	4413      	add	r3, r2
 8000e42:	2250      	movs	r2, #80	; 0x50
 8000e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000e48:	e125      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 1 &&  BUTTON.Morse_bit_old[4] == 2)
 8000e4a:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d118      	bne.n	8000e84 <TIM2_IRQHandler+0x53c>
 8000e52:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d114      	bne.n	8000e84 <TIM2_IRQHandler+0x53c>
 8000e5a:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d110      	bne.n	8000e84 <TIM2_IRQHandler+0x53c>
 8000e62:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d10c      	bne.n	8000e84 <TIM2_IRQHandler+0x53c>
 8000e6a:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d108      	bne.n	8000e84 <TIM2_IRQHandler+0x53c>
	  {
		  BUTTON.Letter[n] = 'Q';
 8000e72:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <TIM2_IRQHandler+0x664>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	2251      	movs	r2, #81	; 0x51
 8000e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000e82:	e108      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000e84:	4b48      	ldr	r3, [pc, #288]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d118      	bne.n	8000ebe <TIM2_IRQHandler+0x576>
 8000e8c:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d114      	bne.n	8000ebe <TIM2_IRQHandler+0x576>
 8000e94:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d110      	bne.n	8000ebe <TIM2_IRQHandler+0x576>
 8000e9c:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d10c      	bne.n	8000ebe <TIM2_IRQHandler+0x576>
 8000ea4:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d108      	bne.n	8000ebe <TIM2_IRQHandler+0x576>
	  {
		  BUTTON.Letter[n] = 'R';
 8000eac:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <TIM2_IRQHandler+0x664>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2252      	movs	r2, #82	; 0x52
 8000eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ebc:	e0eb      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d118      	bne.n	8000ef8 <TIM2_IRQHandler+0x5b0>
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d114      	bne.n	8000ef8 <TIM2_IRQHandler+0x5b0>
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d110      	bne.n	8000ef8 <TIM2_IRQHandler+0x5b0>
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d10c      	bne.n	8000ef8 <TIM2_IRQHandler+0x5b0>
 8000ede:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d108      	bne.n	8000ef8 <TIM2_IRQHandler+0x5b0>
	  {
		  BUTTON.Letter[n] = 'S';
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <TIM2_IRQHandler+0x664>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	2253      	movs	r2, #83	; 0x53
 8000ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ef6:	e0ce      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 2 && BUTTON.Morse_bit_old[2] == 2 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d118      	bne.n	8000f32 <TIM2_IRQHandler+0x5ea>
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d114      	bne.n	8000f32 <TIM2_IRQHandler+0x5ea>
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d110      	bne.n	8000f32 <TIM2_IRQHandler+0x5ea>
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d10c      	bne.n	8000f32 <TIM2_IRQHandler+0x5ea>
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d108      	bne.n	8000f32 <TIM2_IRQHandler+0x5ea>
	  {
		  BUTTON.Letter[n] = 'T';
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <TIM2_IRQHandler+0x664>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f28:	4413      	add	r3, r2
 8000f2a:	2254      	movs	r2, #84	; 0x54
 8000f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f30:	e0b1      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 1 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d118      	bne.n	8000f6c <TIM2_IRQHandler+0x624>
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d114      	bne.n	8000f6c <TIM2_IRQHandler+0x624>
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d110      	bne.n	8000f6c <TIM2_IRQHandler+0x624>
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d10c      	bne.n	8000f6c <TIM2_IRQHandler+0x624>
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d108      	bne.n	8000f6c <TIM2_IRQHandler+0x624>
	  {
		  BUTTON.Letter[n] = 'U';
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <TIM2_IRQHandler+0x664>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f62:	4413      	add	r3, r2
 8000f64:	2255      	movs	r2, #85	; 0x55
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f6a:	e094      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 1 &&  BUTTON.Morse_bit_old[4] == 2)
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d11d      	bne.n	8000fb0 <TIM2_IRQHandler+0x668>
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d119      	bne.n	8000fb0 <TIM2_IRQHandler+0x668>
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d115      	bne.n	8000fb0 <TIM2_IRQHandler+0x668>
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d111      	bne.n	8000fb0 <TIM2_IRQHandler+0x668>
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d10d      	bne.n	8000fb0 <TIM2_IRQHandler+0x668>
	  {
		  BUTTON.Letter[n] = 'V';
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <TIM2_IRQHandler+0x664>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <TIM2_IRQHandler+0x660>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	2256      	movs	r2, #86	; 0x56
 8000fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000fa4:	e077      	b.n	8001096 <TIM2_IRQHandler+0x74e>
 8000fa6:	bf00      	nop
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	2000010b 	.word	0x2000010b
	  }
	  else if (BUTTON.Morse_bit_old[0] == 0 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 1 && BUTTON.Morse_bit_old[3] == 2 &&  BUTTON.Morse_bit_old[4] == 2)
 8000fb0:	4b4e      	ldr	r3, [pc, #312]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d118      	bne.n	8000fea <TIM2_IRQHandler+0x6a2>
 8000fb8:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d114      	bne.n	8000fea <TIM2_IRQHandler+0x6a2>
 8000fc0:	4b4a      	ldr	r3, [pc, #296]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d110      	bne.n	8000fea <TIM2_IRQHandler+0x6a2>
 8000fc8:	4b48      	ldr	r3, [pc, #288]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8000fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d10c      	bne.n	8000fea <TIM2_IRQHandler+0x6a2>
 8000fd0:	4b46      	ldr	r3, [pc, #280]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8000fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d108      	bne.n	8000fea <TIM2_IRQHandler+0x6a2>
	  {
		  BUTTON.Letter[n] = 'W';
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <TIM2_IRQHandler+0x7a8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b43      	ldr	r3, [pc, #268]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2257      	movs	r2, #87	; 0x57
 8000fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000fe8:	e055      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 1 &&  BUTTON.Morse_bit_old[4] == 2)
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d118      	bne.n	8001024 <TIM2_IRQHandler+0x6dc>
 8000ff2:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d114      	bne.n	8001024 <TIM2_IRQHandler+0x6dc>
 8000ffa:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d110      	bne.n	8001024 <TIM2_IRQHandler+0x6dc>
 8001002:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	2b01      	cmp	r3, #1
 8001008:	d10c      	bne.n	8001024 <TIM2_IRQHandler+0x6dc>
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 800100c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100e:	2b02      	cmp	r3, #2
 8001010:	d108      	bne.n	8001024 <TIM2_IRQHandler+0x6dc>
	  {
		  BUTTON.Letter[n] = 'X';
 8001012:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <TIM2_IRQHandler+0x7a8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	4b34      	ldr	r3, [pc, #208]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 800101a:	4413      	add	r3, r2
 800101c:	2258      	movs	r2, #88	; 0x58
 800101e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001022:	e038      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 0 && BUTTON.Morse_bit_old[2] == 1 && BUTTON.Morse_bit_old[3] == 1 &&  BUTTON.Morse_bit_old[4] == 2)
 8001024:	4b31      	ldr	r3, [pc, #196]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	2b01      	cmp	r3, #1
 800102a:	d118      	bne.n	800105e <TIM2_IRQHandler+0x716>
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	2b00      	cmp	r3, #0
 8001032:	d114      	bne.n	800105e <TIM2_IRQHandler+0x716>
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8001036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001038:	2b01      	cmp	r3, #1
 800103a:	d110      	bne.n	800105e <TIM2_IRQHandler+0x716>
 800103c:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 800103e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001040:	2b01      	cmp	r3, #1
 8001042:	d10c      	bne.n	800105e <TIM2_IRQHandler+0x716>
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8001046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001048:	2b02      	cmp	r3, #2
 800104a:	d108      	bne.n	800105e <TIM2_IRQHandler+0x716>
	  {
		  BUTTON.Letter[n] = 'Y';
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <TIM2_IRQHandler+0x7a8>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8001054:	4413      	add	r3, r2
 8001056:	2259      	movs	r2, #89	; 0x59
 8001058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800105c:	e01b      	b.n	8001096 <TIM2_IRQHandler+0x74e>
	  }
	  else if (BUTTON.Morse_bit_old[0] == 1 && BUTTON.Morse_bit_old[1] == 1 && BUTTON.Morse_bit_old[2] == 0 && BUTTON.Morse_bit_old[3] == 0 &&  BUTTON.Morse_bit_old[4] == 2)
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	2b01      	cmp	r3, #1
 8001064:	d117      	bne.n	8001096 <TIM2_IRQHandler+0x74e>
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	2b01      	cmp	r3, #1
 800106c:	d113      	bne.n	8001096 <TIM2_IRQHandler+0x74e>
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10f      	bne.n	8001096 <TIM2_IRQHandler+0x74e>
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10b      	bne.n	8001096 <TIM2_IRQHandler+0x74e>
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 8001080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001082:	2b02      	cmp	r3, #2
 8001084:	d107      	bne.n	8001096 <TIM2_IRQHandler+0x74e>
	  {
		  BUTTON.Letter[n] = 'Z';
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <TIM2_IRQHandler+0x7a8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 800108e:	4413      	add	r3, r2
 8001090:	225a      	movs	r2, #90	; 0x5a
 8001092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  }
	  n++; // index of BUTTON.Letter
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <TIM2_IRQHandler+0x7a8>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <TIM2_IRQHandler+0x7a8>)
 80010a0:	701a      	strb	r2, [r3, #0]

  }
  if (BUTTON.Released_Duration_Now == 7000)
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d11a      	bne.n	80010e4 <TIM2_IRQHandler+0x79c>
  {
	  memcpy(BUTTON.Word, BUTTON.Letter, 10);
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 80010b2:	324a      	adds	r2, #74	; 0x4a
 80010b4:	3340      	adds	r3, #64	; 0x40
 80010b6:	cb03      	ldmia	r3!, {r0, r1}
 80010b8:	6010      	str	r0, [r2, #0]
 80010ba:	6051      	str	r1, [r2, #4]
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	8113      	strh	r3, [r2, #8]
	  for (int m = 0; m<10; m++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	e008      	b.n	80010d8 <TIM2_IRQHandler+0x790>
	  {
		  BUTTON.Letter[m] = 2;
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <TIM2_IRQHandler+0x7a4>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	3340      	adds	r3, #64	; 0x40
 80010ce:	2202      	movs	r2, #2
 80010d0:	701a      	strb	r2, [r3, #0]
	  for (int m = 0; m<10; m++)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b09      	cmp	r3, #9
 80010dc:	ddf3      	ble.n	80010c6 <TIM2_IRQHandler+0x77e>
	  }
	  n = 0;  //index of BUTTON.Letter
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <TIM2_IRQHandler+0x7a8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
  }



  /* USER CODE END TIM2_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	2000010b 	.word	0x2000010b

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001142:	f7ff ffd7 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f001 fef5 	bl	8002f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff f9c5 	bl	80004d8 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001150:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800115c:	08002fcc 	.word	0x08002fcc
  ldr r2, =_sbss
 8001160:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001164:	20000110 	.word	0x20000110

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_Init+0x40>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_Init+0x40>)
 8001182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_Init+0x40>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f92b 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fb12 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f943 	bl	800145a <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f90b 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000054 	.word	0x20000054
 8001208:	2000005c 	.word	0x2000005c
 800120c:	20000058 	.word	0x20000058

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2000005c 	.word	0x2000005c
 8001234:	2000010c 	.word	0x2000010c

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2000010c 	.word	0x2000010c

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	e159      	b.n	8001744 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 8148 	bne.w	800173e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d005      	beq.n	80014c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d130      	bne.n	8001528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 0201 	and.w	r2, r3, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b03      	cmp	r3, #3
 8001532:	d017      	beq.n	8001564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d123      	bne.n	80015b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	69b9      	ldr	r1, [r7, #24]
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0203 	and.w	r2, r3, #3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80a2 	beq.w	800173e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b57      	ldr	r3, [pc, #348]	; (800175c <HAL_GPIO_Init+0x2e8>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a56      	ldr	r2, [pc, #344]	; (800175c <HAL_GPIO_Init+0x2e8>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b54      	ldr	r3, [pc, #336]	; (800175c <HAL_GPIO_Init+0x2e8>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001616:	4a52      	ldr	r2, [pc, #328]	; (8001760 <HAL_GPIO_Init+0x2ec>)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a49      	ldr	r2, [pc, #292]	; (8001764 <HAL_GPIO_Init+0x2f0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d019      	beq.n	8001676 <HAL_GPIO_Init+0x202>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a48      	ldr	r2, [pc, #288]	; (8001768 <HAL_GPIO_Init+0x2f4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0x1fe>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a47      	ldr	r2, [pc, #284]	; (800176c <HAL_GPIO_Init+0x2f8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00d      	beq.n	800166e <HAL_GPIO_Init+0x1fa>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a46      	ldr	r2, [pc, #280]	; (8001770 <HAL_GPIO_Init+0x2fc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d007      	beq.n	800166a <HAL_GPIO_Init+0x1f6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a45      	ldr	r2, [pc, #276]	; (8001774 <HAL_GPIO_Init+0x300>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_GPIO_Init+0x1f2>
 8001662:	2304      	movs	r3, #4
 8001664:	e008      	b.n	8001678 <HAL_GPIO_Init+0x204>
 8001666:	2307      	movs	r3, #7
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x204>
 800166a:	2303      	movs	r3, #3
 800166c:	e004      	b.n	8001678 <HAL_GPIO_Init+0x204>
 800166e:	2302      	movs	r3, #2
 8001670:	e002      	b.n	8001678 <HAL_GPIO_Init+0x204>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x204>
 8001676:	2300      	movs	r3, #0
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	f002 0203 	and.w	r2, r2, #3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4093      	lsls	r3, r2
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001688:	4935      	ldr	r1, [pc, #212]	; (8001760 <HAL_GPIO_Init+0x2ec>)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_GPIO_Init+0x304>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ba:	4a2f      	ldr	r2, [pc, #188]	; (8001778 <HAL_GPIO_Init+0x304>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_GPIO_Init+0x304>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e4:	4a24      	ldr	r2, [pc, #144]	; (8001778 <HAL_GPIO_Init+0x304>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_GPIO_Init+0x304>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170e:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <HAL_GPIO_Init+0x304>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_GPIO_Init+0x304>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_GPIO_Init+0x304>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3301      	adds	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	f67f aea2 	bls.w	8001490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40013800 	.word	0x40013800
 8001764:	40020000 	.word	0x40020000
 8001768:	40020400 	.word	0x40020400
 800176c:	40020800 	.word	0x40020800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40021000 	.word	0x40021000
 8001778:	40013c00 	.word	0x40013c00

0800177c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e001      	b.n	800179e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e267      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d075      	beq.n	80018ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017fe:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b04      	cmp	r3, #4
 8001808:	d00c      	beq.n	8001824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180a:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001812:	2b08      	cmp	r3, #8
 8001814:	d112      	bne.n	800183c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001816:	4b82      	ldr	r3, [pc, #520]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001822:	d10b      	bne.n	800183c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	4b7e      	ldr	r3, [pc, #504]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d05b      	beq.n	80018e8 <HAL_RCC_OscConfig+0x108>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d157      	bne.n	80018e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e242      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001844:	d106      	bne.n	8001854 <HAL_RCC_OscConfig+0x74>
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a75      	ldr	r2, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xb0>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0x98>
 800185e:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6f      	ldr	r2, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b6d      	ldr	r3, [pc, #436]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6c      	ldr	r2, [pc, #432]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xb0>
 8001878:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a68      	ldr	r2, [pc, #416]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b66      	ldr	r3, [pc, #408]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a65      	ldr	r2, [pc, #404]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fcce 	bl	8001238 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fcca 	bl	8001238 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e207      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xc0>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fcba 	bl	8001238 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff fcb6 	bl	8001238 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	; 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1f3      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0xe8>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d063      	beq.n	80019be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f6:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800190a:	2b08      	cmp	r3, #8
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190e:	4b44      	ldr	r3, [pc, #272]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x152>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e1c7      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4937      	ldr	r1, [pc, #220]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	e03a      	b.n	80019be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_RCC_OscConfig+0x244>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff fc6f 	bl	8001238 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fc6b 	bl	8001238 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1a8      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4925      	ldr	r1, [pc, #148]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_OscConfig+0x244>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fc4e 	bl	8001238 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fc4a 	bl	8001238 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e187      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d036      	beq.n	8001a38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d016      	beq.n	8001a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_RCC_OscConfig+0x248>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff fc2e 	bl	8001238 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff fc2a 	bl	8001238 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e167      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80019f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x200>
 80019fe:	e01b      	b.n	8001a38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x248>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fc17 	bl	8001238 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	e00e      	b.n	8001a2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fc13 	bl	8001238 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d907      	bls.n	8001a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e150      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	42470000 	.word	0x42470000
 8001a28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2c:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ea      	bne.n	8001a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8097 	beq.w	8001b74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b81      	ldr	r3, [pc, #516]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b7d      	ldr	r3, [pc, #500]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a7c      	ldr	r2, [pc, #496]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b7a      	ldr	r3, [pc, #488]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a76:	4b77      	ldr	r3, [pc, #476]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d118      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a82:	4b74      	ldr	r3, [pc, #464]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a73      	ldr	r2, [pc, #460]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fbd3 	bl	8001238 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a96:	f7ff fbcf 	bl	8001238 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e10c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x2ea>
 8001abc:	4b64      	ldr	r3, [pc, #400]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac0:	4a63      	ldr	r2, [pc, #396]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac8:	e01c      	b.n	8001b04 <HAL_RCC_OscConfig+0x324>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x30c>
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a5e      	ldr	r2, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ade:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a5b      	ldr	r2, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0x324>
 8001aec:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
 8001af8:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afc:	4a54      	ldr	r2, [pc, #336]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001afe:	f023 0304 	bic.w	r3, r3, #4
 8001b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d015      	beq.n	8001b38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff fb94 	bl	8001238 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7ff fb90 	bl	8001238 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e0cb      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0ee      	beq.n	8001b14 <HAL_RCC_OscConfig+0x334>
 8001b36:	e014      	b.n	8001b62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b38:	f7ff fb7e 	bl	8001238 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff fb7a 	bl	8001238 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0b5      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ee      	bne.n	8001b40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	4a38      	ldr	r2, [pc, #224]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a1 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b7e:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d05c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d141      	bne.n	8001c16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_RCC_OscConfig+0x478>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fb4e 	bl	8001238 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff fb4a 	bl	8001238 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e087      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	491b      	ldr	r1, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x478>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff fb23 	bl	8001238 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff fb1f 	bl	8001238 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e05c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x416>
 8001c14:	e054      	b.n	8001cc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_OscConfig+0x478>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb0c 	bl	8001238 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff fb08 	bl	8001238 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e045      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x444>
 8001c42:	e03d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e038      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x4ec>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d028      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d121      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d11a      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d111      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	085b      	lsrs	r3, r3, #1
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0cc      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d90c      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0b8      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d24:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	494d      	ldr	r1, [pc, #308]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d044      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d119      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e07f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e06f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e067      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f023 0203 	bic.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4934      	ldr	r1, [pc, #208]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc0:	f7ff fa3a 	bl	8001238 <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7ff fa36 	bl	8001238 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e04f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 020c 	and.w	r2, r3, #12
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1eb      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d20c      	bcs.n	8001e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e032      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4916      	ldr	r1, [pc, #88]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	490e      	ldr	r1, [pc, #56]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e56:	f000 f821 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	490a      	ldr	r1, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	5ccb      	ldrb	r3, [r1, r3]
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f99a 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	08002fa4 	.word	0x08002fa4
 8001e94:	20000054 	.word	0x20000054
 8001e98:	20000058 	.word	0x20000058

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea0:	b094      	sub	sp, #80	; 0x50
 8001ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eac:	2300      	movs	r3, #0
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb4:	4b79      	ldr	r3, [pc, #484]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d00d      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x40>
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	f200 80e1 	bhi.w	8002088 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ece:	e0db      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ed4:	e0db      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ed6:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ed8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eda:	e0d8      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001edc:	4b6f      	ldr	r3, [pc, #444]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee6:	4b6d      	ldr	r3, [pc, #436]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d063      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef2:	4b6a      	ldr	r3, [pc, #424]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	2200      	movs	r2, #0
 8001efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001efc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f0e:	4622      	mov	r2, r4
 8001f10:	462b      	mov	r3, r5
 8001f12:	f04f 0000 	mov.w	r0, #0
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	0159      	lsls	r1, r3, #5
 8001f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f20:	0150      	lsls	r0, r2, #5
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4621      	mov	r1, r4
 8001f28:	1a51      	subs	r1, r2, r1
 8001f2a:	6139      	str	r1, [r7, #16]
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f40:	4659      	mov	r1, fp
 8001f42:	018b      	lsls	r3, r1, #6
 8001f44:	4651      	mov	r1, sl
 8001f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f4a:	4651      	mov	r1, sl
 8001f4c:	018a      	lsls	r2, r1, #6
 8001f4e:	4651      	mov	r1, sl
 8001f50:	ebb2 0801 	subs.w	r8, r2, r1
 8001f54:	4659      	mov	r1, fp
 8001f56:	eb63 0901 	sbc.w	r9, r3, r1
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f6e:	4690      	mov	r8, r2
 8001f70:	4699      	mov	r9, r3
 8001f72:	4623      	mov	r3, r4
 8001f74:	eb18 0303 	adds.w	r3, r8, r3
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	462b      	mov	r3, r5
 8001f7c:	eb49 0303 	adc.w	r3, r9, r3
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f8e:	4629      	mov	r1, r5
 8001f90:	024b      	lsls	r3, r1, #9
 8001f92:	4621      	mov	r1, r4
 8001f94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f98:	4621      	mov	r1, r4
 8001f9a:	024a      	lsls	r2, r1, #9
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fac:	f7fe f912 	bl	80001d4 <__aeabi_uldivmod>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fb8:	e058      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fba:	4b38      	ldr	r3, [pc, #224]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fca:	623b      	str	r3, [r7, #32]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fd4:	4642      	mov	r2, r8
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	f04f 0000 	mov.w	r0, #0
 8001fdc:	f04f 0100 	mov.w	r1, #0
 8001fe0:	0159      	lsls	r1, r3, #5
 8001fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe6:	0150      	lsls	r0, r2, #5
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4641      	mov	r1, r8
 8001fee:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ff2:	4649      	mov	r1, r9
 8001ff4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002004:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002008:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800200c:	ebb2 040a 	subs.w	r4, r2, sl
 8002010:	eb63 050b 	sbc.w	r5, r3, fp
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	00eb      	lsls	r3, r5, #3
 800201e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002022:	00e2      	lsls	r2, r4, #3
 8002024:	4614      	mov	r4, r2
 8002026:	461d      	mov	r5, r3
 8002028:	4643      	mov	r3, r8
 800202a:	18e3      	adds	r3, r4, r3
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	464b      	mov	r3, r9
 8002030:	eb45 0303 	adc.w	r3, r5, r3
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002042:	4629      	mov	r1, r5
 8002044:	028b      	lsls	r3, r1, #10
 8002046:	4621      	mov	r1, r4
 8002048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800204c:	4621      	mov	r1, r4
 800204e:	028a      	lsls	r2, r1, #10
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002056:	2200      	movs	r2, #0
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	61fa      	str	r2, [r7, #28]
 800205c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002060:	f7fe f8b8 	bl	80001d4 <__aeabi_uldivmod>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4613      	mov	r3, r2
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	3301      	adds	r3, #1
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800207c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800207e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002086:	e002      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800208c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002090:	4618      	mov	r0, r3
 8002092:	3750      	adds	r7, #80	; 0x50
 8002094:	46bd      	mov	sp, r7
 8002096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	00f42400 	.word	0x00f42400
 80020a4:	007a1200 	.word	0x007a1200

080020a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000054 	.word	0x20000054

080020c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020c4:	f7ff fff0 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0a9b      	lsrs	r3, r3, #10
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4903      	ldr	r1, [pc, #12]	; (80020e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	08002fb4 	.word	0x08002fb4

080020e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020ec:	f7ff ffdc 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	0b5b      	lsrs	r3, r3, #13
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	4903      	ldr	r1, [pc, #12]	; (800210c <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fe:	5ccb      	ldrb	r3, [r1, r3]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	08002fb4 	.word	0x08002fb4

08002110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e041      	b.n	80021a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fb6e 	bl	8000818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f000 fa92 	bl	8002678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d001      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e044      	b.n	8002252 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_TIM_Base_Start_IT+0xb0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d018      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x6c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f2:	d013      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x6c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <HAL_TIM_Base_Start_IT+0xb4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00e      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x6c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_TIM_Base_Start_IT+0xb8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d009      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x6c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_TIM_Base_Start_IT+0xbc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x6c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_TIM_Base_Start_IT+0xc0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d111      	bne.n	8002240 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b06      	cmp	r3, #6
 800222c:	d010      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223e:	e007      	b.n	8002250 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40010000 	.word	0x40010000
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800
 800226c:	40000c00 	.word	0x40000c00
 8002270:	40014000 	.word	0x40014000

08002274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b02      	cmp	r3, #2
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0202 	mvn.w	r2, #2
 80022a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f9bf 	bl	800263a <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f9b1 	bl	8002626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f9c2 	bl	800264e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0204 	mvn.w	r2, #4
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f995 	bl	800263a <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f987 	bl	8002626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f998 	bl	800264e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b08      	cmp	r3, #8
 8002330:	d122      	bne.n	8002378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b08      	cmp	r3, #8
 800233e:	d11b      	bne.n	8002378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0208 	mvn.w	r2, #8
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2204      	movs	r2, #4
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f96b 	bl	800263a <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f95d 	bl	8002626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f96e 	bl	800264e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b10      	cmp	r3, #16
 8002384:	d122      	bne.n	80023cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b10      	cmp	r3, #16
 8002392:	d11b      	bne.n	80023cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0210 	mvn.w	r2, #16
 800239c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2208      	movs	r2, #8
 80023a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f941 	bl	800263a <HAL_TIM_IC_CaptureCallback>
 80023b8:	e005      	b.n	80023c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f933 	bl	8002626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f944 	bl	800264e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10e      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d107      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0201 	mvn.w	r2, #1
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f90d 	bl	8002612 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b80      	cmp	r3, #128	; 0x80
 8002404:	d10e      	bne.n	8002424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d107      	bne.n	8002424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800241c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fabc 	bl	800299c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	d107      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f909 	bl	8002662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b20      	cmp	r3, #32
 800245c:	d10e      	bne.n	800247c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b20      	cmp	r3, #32
 800246a:	d107      	bne.n	800247c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0220 	mvn.w	r2, #32
 8002474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fa86 	bl	8002988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_TIM_ConfigClockSource+0x1c>
 800249c:	2302      	movs	r3, #2
 800249e:	e0b4      	b.n	800260a <HAL_TIM_ConfigClockSource+0x186>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d8:	d03e      	beq.n	8002558 <HAL_TIM_ConfigClockSource+0xd4>
 80024da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024de:	f200 8087 	bhi.w	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e6:	f000 8086 	beq.w	80025f6 <HAL_TIM_ConfigClockSource+0x172>
 80024ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ee:	d87f      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d01a      	beq.n	800252a <HAL_TIM_ConfigClockSource+0xa6>
 80024f4:	2b70      	cmp	r3, #112	; 0x70
 80024f6:	d87b      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 80024f8:	2b60      	cmp	r3, #96	; 0x60
 80024fa:	d050      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x11a>
 80024fc:	2b60      	cmp	r3, #96	; 0x60
 80024fe:	d877      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002500:	2b50      	cmp	r3, #80	; 0x50
 8002502:	d03c      	beq.n	800257e <HAL_TIM_ConfigClockSource+0xfa>
 8002504:	2b50      	cmp	r3, #80	; 0x50
 8002506:	d873      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	d058      	beq.n	80025be <HAL_TIM_ConfigClockSource+0x13a>
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d86f      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002510:	2b30      	cmp	r3, #48	; 0x30
 8002512:	d064      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x15a>
 8002514:	2b30      	cmp	r3, #48	; 0x30
 8002516:	d86b      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002518:	2b20      	cmp	r3, #32
 800251a:	d060      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x15a>
 800251c:	2b20      	cmp	r3, #32
 800251e:	d867      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05c      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x15a>
 8002524:	2b10      	cmp	r3, #16
 8002526:	d05a      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x15a>
 8002528:	e062      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6899      	ldr	r1, [r3, #8]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f000 f997 	bl	800286c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800254c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	609a      	str	r2, [r3, #8]
      break;
 8002556:	e04f      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6899      	ldr	r1, [r3, #8]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f000 f980 	bl	800286c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800257a:	609a      	str	r2, [r3, #8]
      break;
 800257c:	e03c      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	461a      	mov	r2, r3
 800258c:	f000 f8f4 	bl	8002778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2150      	movs	r1, #80	; 0x50
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f94d 	bl	8002836 <TIM_ITRx_SetConfig>
      break;
 800259c:	e02c      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6859      	ldr	r1, [r3, #4]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	461a      	mov	r2, r3
 80025ac:	f000 f913 	bl	80027d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2160      	movs	r1, #96	; 0x60
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f93d 	bl	8002836 <TIM_ITRx_SetConfig>
      break;
 80025bc:	e01c      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f000 f8d4 	bl	8002778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2140      	movs	r1, #64	; 0x40
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f92d 	bl	8002836 <TIM_ITRx_SetConfig>
      break;
 80025dc:	e00c      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f000 f924 	bl	8002836 <TIM_ITRx_SetConfig>
      break;
 80025ee:	e003      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      break;
 80025f4:	e000      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a34      	ldr	r2, [pc, #208]	; (800275c <TIM_Base_SetConfig+0xe4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00f      	beq.n	80026b0 <TIM_Base_SetConfig+0x38>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002696:	d00b      	beq.n	80026b0 <TIM_Base_SetConfig+0x38>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a31      	ldr	r2, [pc, #196]	; (8002760 <TIM_Base_SetConfig+0xe8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <TIM_Base_SetConfig+0x38>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a30      	ldr	r2, [pc, #192]	; (8002764 <TIM_Base_SetConfig+0xec>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d003      	beq.n	80026b0 <TIM_Base_SetConfig+0x38>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <TIM_Base_SetConfig+0xf0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d108      	bne.n	80026c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a25      	ldr	r2, [pc, #148]	; (800275c <TIM_Base_SetConfig+0xe4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01b      	beq.n	8002702 <TIM_Base_SetConfig+0x8a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d0:	d017      	beq.n	8002702 <TIM_Base_SetConfig+0x8a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a22      	ldr	r2, [pc, #136]	; (8002760 <TIM_Base_SetConfig+0xe8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <TIM_Base_SetConfig+0x8a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a21      	ldr	r2, [pc, #132]	; (8002764 <TIM_Base_SetConfig+0xec>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00f      	beq.n	8002702 <TIM_Base_SetConfig+0x8a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a20      	ldr	r2, [pc, #128]	; (8002768 <TIM_Base_SetConfig+0xf0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00b      	beq.n	8002702 <TIM_Base_SetConfig+0x8a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a1f      	ldr	r2, [pc, #124]	; (800276c <TIM_Base_SetConfig+0xf4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <TIM_Base_SetConfig+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <TIM_Base_SetConfig+0xf8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0x8a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <TIM_Base_SetConfig+0xfc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <TIM_Base_SetConfig+0xe4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d103      	bne.n	8002748 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	615a      	str	r2, [r3, #20]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40010000 	.word	0x40010000
 8002760:	40000400 	.word	0x40000400
 8002764:	40000800 	.word	0x40000800
 8002768:	40000c00 	.word	0x40000c00
 800276c:	40014000 	.word	0x40014000
 8002770:	40014400 	.word	0x40014400
 8002774:	40014800 	.word	0x40014800

08002778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	f023 0201 	bic.w	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f023 030a 	bic.w	r3, r3, #10
 80027b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	621a      	str	r2, [r3, #32]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b087      	sub	sp, #28
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	f023 0210 	bic.w	r2, r3, #16
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	031b      	lsls	r3, r3, #12
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	621a      	str	r2, [r3, #32]
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	f043 0307 	orr.w	r3, r3, #7
 8002858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	021a      	lsls	r2, r3, #8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	431a      	orrs	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4313      	orrs	r3, r2
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e050      	b.n	8002966 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d018      	beq.n	800293a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d013      	beq.n	800293a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a16      	ldr	r2, [pc, #88]	; (800297c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10c      	bne.n	8002954 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	4313      	orrs	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40010000 	.word	0x40010000
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800
 8002980:	40000c00 	.word	0x40000c00
 8002984:	40014000 	.word	0x40014000

08002988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e03f      	b.n	8002a42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fd ff44 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	; 0x24
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f829 	bl	8002a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a50:	b0c0      	sub	sp, #256	; 0x100
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a68:	68d9      	ldr	r1, [r3, #12]
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	ea40 0301 	orr.w	r3, r0, r1
 8002a74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002aa4:	f021 010c 	bic.w	r1, r1, #12
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac6:	6999      	ldr	r1, [r3, #24]
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	ea40 0301 	orr.w	r3, r0, r1
 8002ad2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <UART_SetConfig+0x2cc>)
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d005      	beq.n	8002aec <UART_SetConfig+0xa0>
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <UART_SetConfig+0x2d0>)
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d104      	bne.n	8002af6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aec:	f7ff fafc 	bl	80020e8 <HAL_RCC_GetPCLK2Freq>
 8002af0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002af4:	e003      	b.n	8002afe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002af6:	f7ff fae3 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002afa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b08:	f040 810c 	bne.w	8002d24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b10:	2200      	movs	r2, #0
 8002b12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b1e:	4622      	mov	r2, r4
 8002b20:	462b      	mov	r3, r5
 8002b22:	1891      	adds	r1, r2, r2
 8002b24:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b26:	415b      	adcs	r3, r3
 8002b28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b2e:	4621      	mov	r1, r4
 8002b30:	eb12 0801 	adds.w	r8, r2, r1
 8002b34:	4629      	mov	r1, r5
 8002b36:	eb43 0901 	adc.w	r9, r3, r1
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b4e:	4690      	mov	r8, r2
 8002b50:	4699      	mov	r9, r3
 8002b52:	4623      	mov	r3, r4
 8002b54:	eb18 0303 	adds.w	r3, r8, r3
 8002b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b5c:	462b      	mov	r3, r5
 8002b5e:	eb49 0303 	adc.w	r3, r9, r3
 8002b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	18db      	adds	r3, r3, r3
 8002b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002b80:	4613      	mov	r3, r2
 8002b82:	eb42 0303 	adc.w	r3, r2, r3
 8002b86:	657b      	str	r3, [r7, #84]	; 0x54
 8002b88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b90:	f7fd fb20 	bl	80001d4 <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <UART_SetConfig+0x2d4>)
 8002b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	011c      	lsls	r4, r3, #4
 8002ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	1891      	adds	r1, r2, r2
 8002bba:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	eb12 0a01 	adds.w	sl, r2, r1
 8002bca:	4649      	mov	r1, r9
 8002bcc:	eb43 0b01 	adc.w	fp, r3, r1
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002be0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002be4:	4692      	mov	sl, r2
 8002be6:	469b      	mov	fp, r3
 8002be8:	4643      	mov	r3, r8
 8002bea:	eb1a 0303 	adds.w	r3, sl, r3
 8002bee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	eb4b 0303 	adc.w	r3, fp, r3
 8002bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c10:	460b      	mov	r3, r1
 8002c12:	18db      	adds	r3, r3, r3
 8002c14:	643b      	str	r3, [r7, #64]	; 0x40
 8002c16:	4613      	mov	r3, r2
 8002c18:	eb42 0303 	adc.w	r3, r2, r3
 8002c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c26:	f7fd fad5 	bl	80001d4 <__aeabi_uldivmod>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <UART_SetConfig+0x2d4>)
 8002c32:	fba3 2301 	umull	r2, r3, r3, r1
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2264      	movs	r2, #100	; 0x64
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	1acb      	subs	r3, r1, r3
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <UART_SetConfig+0x2d4>)
 8002c48:	fba3 2302 	umull	r2, r3, r3, r2
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c54:	441c      	add	r4, r3
 8002c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c68:	4642      	mov	r2, r8
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	1891      	adds	r1, r2, r2
 8002c6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c70:	415b      	adcs	r3, r3
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c78:	4641      	mov	r1, r8
 8002c7a:	1851      	adds	r1, r2, r1
 8002c7c:	6339      	str	r1, [r7, #48]	; 0x30
 8002c7e:	4649      	mov	r1, r9
 8002c80:	414b      	adcs	r3, r1
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c90:	4659      	mov	r1, fp
 8002c92:	00cb      	lsls	r3, r1, #3
 8002c94:	4651      	mov	r1, sl
 8002c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	00ca      	lsls	r2, r1, #3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	189b      	adds	r3, r3, r2
 8002ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cac:	464b      	mov	r3, r9
 8002cae:	460a      	mov	r2, r1
 8002cb0:	eb42 0303 	adc.w	r3, r2, r3
 8002cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ccc:	460b      	mov	r3, r1
 8002cce:	18db      	adds	r3, r3, r3
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	eb42 0303 	adc.w	r3, r2, r3
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ce2:	f7fd fa77 	bl	80001d4 <__aeabi_uldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <UART_SetConfig+0x2d4>)
 8002cec:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	2164      	movs	r1, #100	; 0x64
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	3332      	adds	r3, #50	; 0x32
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <UART_SetConfig+0x2d4>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	f003 0207 	and.w	r2, r3, #7
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4422      	add	r2, r4
 8002d12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d14:	e105      	b.n	8002f22 <UART_SetConfig+0x4d6>
 8002d16:	bf00      	nop
 8002d18:	40011000 	.word	0x40011000
 8002d1c:	40011400 	.word	0x40011400
 8002d20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d36:	4642      	mov	r2, r8
 8002d38:	464b      	mov	r3, r9
 8002d3a:	1891      	adds	r1, r2, r2
 8002d3c:	6239      	str	r1, [r7, #32]
 8002d3e:	415b      	adcs	r3, r3
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d46:	4641      	mov	r1, r8
 8002d48:	1854      	adds	r4, r2, r1
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	eb43 0501 	adc.w	r5, r3, r1
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	00eb      	lsls	r3, r5, #3
 8002d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d5e:	00e2      	lsls	r2, r4, #3
 8002d60:	4614      	mov	r4, r2
 8002d62:	461d      	mov	r5, r3
 8002d64:	4643      	mov	r3, r8
 8002d66:	18e3      	adds	r3, r4, r3
 8002d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d6c:	464b      	mov	r3, r9
 8002d6e:	eb45 0303 	adc.w	r3, r5, r3
 8002d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d92:	4629      	mov	r1, r5
 8002d94:	008b      	lsls	r3, r1, #2
 8002d96:	4621      	mov	r1, r4
 8002d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	008a      	lsls	r2, r1, #2
 8002da0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002da4:	f7fd fa16 	bl	80001d4 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4b60      	ldr	r3, [pc, #384]	; (8002f30 <UART_SetConfig+0x4e4>)
 8002dae:	fba3 2302 	umull	r2, r3, r3, r2
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	011c      	lsls	r4, r3, #4
 8002db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dc8:	4642      	mov	r2, r8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	1891      	adds	r1, r2, r2
 8002dce:	61b9      	str	r1, [r7, #24]
 8002dd0:	415b      	adcs	r3, r3
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd8:	4641      	mov	r1, r8
 8002dda:	1851      	adds	r1, r2, r1
 8002ddc:	6139      	str	r1, [r7, #16]
 8002dde:	4649      	mov	r1, r9
 8002de0:	414b      	adcs	r3, r1
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002df0:	4659      	mov	r1, fp
 8002df2:	00cb      	lsls	r3, r1, #3
 8002df4:	4651      	mov	r1, sl
 8002df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dfa:	4651      	mov	r1, sl
 8002dfc:	00ca      	lsls	r2, r1, #3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	4642      	mov	r2, r8
 8002e06:	189b      	adds	r3, r3, r2
 8002e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e0c:	464b      	mov	r3, r9
 8002e0e:	460a      	mov	r2, r1
 8002e10:	eb42 0303 	adc.w	r3, r2, r3
 8002e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e30:	4649      	mov	r1, r9
 8002e32:	008b      	lsls	r3, r1, #2
 8002e34:	4641      	mov	r1, r8
 8002e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e3a:	4641      	mov	r1, r8
 8002e3c:	008a      	lsls	r2, r1, #2
 8002e3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e42:	f7fd f9c7 	bl	80001d4 <__aeabi_uldivmod>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <UART_SetConfig+0x4e4>)
 8002e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	2164      	movs	r1, #100	; 0x64
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	3332      	adds	r3, #50	; 0x32
 8002e5e:	4a34      	ldr	r2, [pc, #208]	; (8002f30 <UART_SetConfig+0x4e4>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e6a:	441c      	add	r4, r3
 8002e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e70:	2200      	movs	r2, #0
 8002e72:	673b      	str	r3, [r7, #112]	; 0x70
 8002e74:	677a      	str	r2, [r7, #116]	; 0x74
 8002e76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e7a:	4642      	mov	r2, r8
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	1891      	adds	r1, r2, r2
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	415b      	adcs	r3, r3
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	1851      	adds	r1, r2, r1
 8002e8e:	6039      	str	r1, [r7, #0]
 8002e90:	4649      	mov	r1, r9
 8002e92:	414b      	adcs	r3, r1
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ea2:	4659      	mov	r1, fp
 8002ea4:	00cb      	lsls	r3, r1, #3
 8002ea6:	4651      	mov	r1, sl
 8002ea8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eac:	4651      	mov	r1, sl
 8002eae:	00ca      	lsls	r2, r1, #3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4642      	mov	r2, r8
 8002eb8:	189b      	adds	r3, r3, r2
 8002eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ebc:	464b      	mov	r3, r9
 8002ebe:	460a      	mov	r2, r1
 8002ec0:	eb42 0303 	adc.w	r3, r2, r3
 8002ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed0:	667a      	str	r2, [r7, #100]	; 0x64
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ede:	4649      	mov	r1, r9
 8002ee0:	008b      	lsls	r3, r1, #2
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee8:	4641      	mov	r1, r8
 8002eea:	008a      	lsls	r2, r1, #2
 8002eec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ef0:	f7fd f970 	bl	80001d4 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <UART_SetConfig+0x4e4>)
 8002efa:	fba3 1302 	umull	r1, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2164      	movs	r1, #100	; 0x64
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	3332      	adds	r3, #50	; 0x32
 8002f0c:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <UART_SetConfig+0x4e4>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4422      	add	r2, r4
 8002f20:	609a      	str	r2, [r3, #8]
}
 8002f22:	bf00      	nop
 8002f24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f2e:	bf00      	nop
 8002f30:	51eb851f 	.word	0x51eb851f

08002f34 <__libc_init_array>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	4d0d      	ldr	r5, [pc, #52]	; (8002f6c <__libc_init_array+0x38>)
 8002f38:	4c0d      	ldr	r4, [pc, #52]	; (8002f70 <__libc_init_array+0x3c>)
 8002f3a:	1b64      	subs	r4, r4, r5
 8002f3c:	10a4      	asrs	r4, r4, #2
 8002f3e:	2600      	movs	r6, #0
 8002f40:	42a6      	cmp	r6, r4
 8002f42:	d109      	bne.n	8002f58 <__libc_init_array+0x24>
 8002f44:	4d0b      	ldr	r5, [pc, #44]	; (8002f74 <__libc_init_array+0x40>)
 8002f46:	4c0c      	ldr	r4, [pc, #48]	; (8002f78 <__libc_init_array+0x44>)
 8002f48:	f000 f820 	bl	8002f8c <_init>
 8002f4c:	1b64      	subs	r4, r4, r5
 8002f4e:	10a4      	asrs	r4, r4, #2
 8002f50:	2600      	movs	r6, #0
 8002f52:	42a6      	cmp	r6, r4
 8002f54:	d105      	bne.n	8002f62 <__libc_init_array+0x2e>
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5c:	4798      	blx	r3
 8002f5e:	3601      	adds	r6, #1
 8002f60:	e7ee      	b.n	8002f40 <__libc_init_array+0xc>
 8002f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f66:	4798      	blx	r3
 8002f68:	3601      	adds	r6, #1
 8002f6a:	e7f2      	b.n	8002f52 <__libc_init_array+0x1e>
 8002f6c:	08002fc4 	.word	0x08002fc4
 8002f70:	08002fc4 	.word	0x08002fc4
 8002f74:	08002fc4 	.word	0x08002fc4
 8002f78:	08002fc8 	.word	0x08002fc8

08002f7c <memset>:
 8002f7c:	4402      	add	r2, r0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memset+0xa>
 8002f84:	4770      	bx	lr
 8002f86:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8a:	e7f9      	b.n	8002f80 <memset+0x4>

08002f8c <_init>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr

08002f98 <_fini>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr
